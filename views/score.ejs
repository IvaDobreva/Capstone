<!DOCTYPE html>
<html lang="en">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>

  <body>
    <!--include ejs file like this.-->
    <header>
      <% include templates/header.ejs %>
    </header>

    <div class="body">
      <div id="score"> <h3> Your Score is: <%=score%> / 10 <h3> </div>
      <div> Give Your contribution by evaluating the translation and get more points! </div>

      <table align="center">
        <% for(var i=0; i<10; i++) { %>

          <tr><td><img id="img" align="middle" src= "<%=image[i]%>" width="200" height="200"></td></tr>
          <tr><td> Possible Answers: </td></tr>

            <% for(var j=0; j<(answer[i]).length; j++) { %>
              <tr><td> <%= answer[i][j]['kor_word'] %> <%= answer[i][j]['eng_word']%> </td></tr>
              <div class="row lead">
                <td id="stars-<%=i%>-<%=j%>" class="starrr"></td>
            </div>
            <% } %>
          <tr><td>Your Answer: <%= uans[i] %></td> </tr>
      <% } %>
      <tr><td>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</td></tr>
    </table>
    <button class="submit" id="sbmt" onclick ="" name="Submit">Submit</button>
    </div>

  </body>

  <script>
  // Starrr plugin (https://github.com/dobtco/starrr)
var __slice = [].slice;

(function($, window) {
  var Starrr;

  Starrr = (function() {
    Starrr.prototype.defaults = {
      rating: void 0,
      numStars: 5,
      change: function(e, value) {}
    };

    function Starrr($el, options) {
      var i, _, _ref,
        _this = this;

      this.options = $.extend({}, this.defaults, options);
      this.$el = $el;
      _ref = this.defaults;
      for (i in _ref) {
        _ = _ref[i];
        if (this.$el.data(i) != null) {
          this.options[i] = this.$el.data(i);
        }
      }
      this.createStars();
      this.syncRating();
      this.$el.on('mouseover.starrr', 'span', function(e) {
        return _this.syncRating(_this.$el.find('span').index(e.currentTarget) + 1);
      });
      this.$el.on('mouseout.starrr', function() {
        return _this.syncRating();
      });
      this.$el.on('click.starrr', 'span', function(e) {
        return _this.setRating(_this.$el.find('span').index(e.currentTarget) + 1);
      });
      this.$el.on('starrr:change', this.options.change);
    }

    Starrr.prototype.createStars = function() {
      var _i, _ref, _results;

      _results = [];
      for (_i = 1, _ref = this.options.numStars; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
        _results.push(this.$el.append("<span class='glyphicon .glyphicon-star-empty'></span>"));
      }
      return _results;
    };

    Starrr.prototype.setRating = function(rating) {
      if (this.options.rating === rating) {
        rating = void 0;
      }
      this.options.rating = rating;
      this.syncRating();
      return this.$el.trigger('starrr:change', rating);
    };

    Starrr.prototype.syncRating = function(rating) {
      var i, _i, _j, _ref;

      rating || (rating = this.options.rating);
      if (rating) {
        for (i = _i = 0, _ref = rating - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.$el.find('span').eq(i).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
        }
      }
      if (rating && rating < 5) {
        for (i = _j = rating; rating <= 4 ? _j <= 4 : _j >= 4; i = rating <= 4 ? ++_j : --_j) {
          this.$el.find('span').eq(i).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
        }
      }
      if (!rating) {
        return this.$el.find('span').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
      }
    };

    return Starrr;

  })();
  return $.fn.extend({
    starrr: function() {
      var args, option;

      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.each(function() {
        var data;

        data = $(this).data('star-rating');
        if (!data) {
          $(this).data('star-rating', (data = new Starrr($(this), option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);

$(function() {
  return $(".starrr").starrr();
});

$('#sbmt').click(function() {
  var rating = [];
  <% for(var i=0; i<10; i++) { %>
    <%console.log(answer[i]) %>
    <% for(var j=0; j<(answer[i]).length; j++) { %>
      $('#stars-<%=i%>-<%=j%>').on('starrr:change', function(e, value){
        console.log(value);
      });
    <% } %>
  <% } %>
  $('#stars-existing').on('starrr:change', function(e, value){
    $('#count-existing').html(value);
  });
  });


  </script>

</html>
